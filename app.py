# -*- coding: utf-8 -*-
"""MultipleDiseasePrediciton.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kxPbCOzMqfwB_IYBuLJu9MnEnleyVb12
"""

# !pip install -q streamlit
# !pip install -q streamlit_option_menu

import pickle
import streamlit as st
from streamlit_option_menu import option_menu

# loading the saved models

diabetes_model = pickle.load(open('diabetes_model.sav','rb'))
heart_model = pickle.load(open('heart_model.sav', 'rb'))

# sidebar for navigate

with st.sidebar:
    selected = option_menu('Multiple Disease Prediction System using ML',
    ['Diabetes Prediction',
    'Heart Disease Prediciton'] ,
                        icons=['activity' ,'heart','clipboard2-pulse'],
                        default_index=0)

# Diabetes Prediction
if (selected=='Diabetes Prediciton'):
    
    st.title('Diabetes Prediction using ML')
    
    Pregnancies = st.text_input('Number of Pregnancies')
    Glucose = st.text_input('Glucose level')
    BloodPressure = st.text_input('Blood Pressure value')
    SkinThickness = st.text_input('Skin Thickness value')
    Insulin = st.text_input('Insulin level')
    DiabetesPedigreeFunction = st.text_input('Diabetes Pedigree Function value')
    Age = st.text_input('Age of the Person')

    # code for Prediction
    diab_dignosis = ''

    # creating a button for prediction
    if st.button('Diabetes Test Result'):
      diab_prediciton = diabetes_model.predict([[Pregnancies, Glucose, BloodPressure,
                                                 SkinThickness, Insulin, BMI,
                                                 DiabetesPedigreeFunction, Age]])
      if (diab_prediction[0]==1):
        diab_diagnosis = 'The person is Diabetic'
      else:
        diab_diagnosis = 'The person is not Diabetic'
    st.success(diab_diagnosis)




# Heart Disease
if (selected=='Heart Disease Prediction'):
    
    st.title('Heart Disease Prediciton using ML')

    Sex = st.text_input('1 = male, 0 = female')
    Cp = st.text_input('Chest Pain Type')
    Trestbps = st.text_input('Resting Bp in mm Hg')
    Chol = st.text_input('Serum Cholestoral in mg/dl')
    Fbs = st.text_input('Fasting blood sugar > 120 mg/dl (1 = true, 0 = false)')
    Restecg = st.text_input('Resting electrocardigraphic ')
    Thalach = st.text_input('Maximum heart rate achieved')
    Exang = st.text_input('Exercisee induced angina (1 = yes, 0 = no)')
    Oldpeak = st.text_input('ST depression induced by exercise relative to rest')
    Slope = st.text_input('The slope of the peak exercise ST segment')
    Ca = st.text_input('number of major vessels (0-3) colored by flourosopy')
    Thal = st.text_input('thal - 3 = normal; 6 = fixed defect; 7 = reversable defect')
    Age = st.text_input('Age of the Person')

    # code for Prediction
    heart_dignosis = ''

    # creating a button for prediction
    if st.button('Heart Test Result'):
      heart_prediciton = heart_model.predict([[ sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal, age ]])
      if (heart_prediction[0]==1):
        heart_diagnosis = 'The person has a Heart Disease.'
      else:
        heart_diagnosis = 'The person does not have a Heart Disease.'
    st.success(heart_diagnosis)

